

// mod ::gui::QPicture
// package qtgui
// /usr/include/qt/QtGui/qpicture.h
// #include <qpicture.h>
// #include <QtGui>

//  header block end

//  main block begin

//  main block end

//  use block begin

//  use block end

//  ext block begin


/*
#include <stdlib.h>
// extern C begin: 17
*/
// import "C"
// import "unsafe"
// import "reflect"
// import "fmt"
// import "log"
// import "github.com/kitech/qt.go/qtrt"
// import "github.com/kitech/qt.go/qtcore"
use qtcore::*; // super::super::%!s(MISSING)::*;
use std::default::Default;
use std::ops::Deref;
use qtrt; // super::super::qtrt;
use super::*;
//  ext block end

//  body block begin

// int metric(QPaintDevice::PaintDeviceMetric)
// func (this *QPicture) InheritMetric(f func(m int) int) {
//  qtrt.SetAllInheritCallback(this, "metric", f)
// }



/*

*/
#[derive(Default)] // class sizeof(QPicture)=32
pub struct QPicture {
  qbase: QPaintDevice,
  pub qclsinst: usize /* *mut c_void*/,
}
// type QPicture_ITF interface {
//    QPaintDevice_ITF
//    QPicture_PTR() *QPicture
//}
//func (ptr *QPicture) QPicture_PTR() *QPicture { return ptr }

impl /*struct*/ QPicture {
  pub fn inheritFrom(qthis: usize /* *mut c_void*/) -> QPicture {
    return QPicture{qclsinst: qthis, ..Default::default()};
  }
}
//impl Deref for QPicture {
//  type Target = QPictureBASE;
//
//  fn deref(&self) -> &QPictureBASE {
//    return & self.qbase;
//  }
//}
//impl AsRef<QPictureBASE> for QPicture {
//  fn as_ref(& self) -> & QPictureBASE {
//    return & self.qbase;
//  }
//}
// /usr/include/qt/QtGui/qpicture.h:59
// index:0
// Public Visibility=Default Availability=Available
// [-2] void QPicture(int)

/*
Constructs an empty picture.

The formatVersion parameter may be used to create a QPicture that can be read by applications that are compiled with earlier versions of Qt.

Note that the default formatVersion is -1 which signifies the current release, i.e. for Qt 4.0 a formatVersion of 7 is the same as the default formatVersion of -1.

Reading pictures generated by earlier versions of Qt is not supported in Qt 4.0.
*/
// QPicture(int) ctx.fn_proto_cpp
impl /*struct*/ QPicture {
  pub fn QPicture_0<T: QPicture_QPicture_0>(value: T) -> QPicture {
    let rsthis = value.QPicture_0();
    return rsthis;
    // return 1;
  }
}

pub trait QPicture_QPicture_0 {
  fn QPicture_0(self) -> QPicture;
}
// QPicture(int) ctx.fn_proto_cpp
impl<'a> /*trait*/ QPicture_QPicture_0 for (i32) {
  fn QPicture_0(self) -> QPicture {
    // unsafe{_ZN8QPictureC2Ei()};
    let arg0 = (&self) as *const i32 as usize;
    let qthis: usize = qtrt::InvokeQtFunc6("_ZN8QPictureC2Ei", 1,qtrt::FFITY_INT,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    let rsthis = QPicture{qclsinst: qthis, ..Default::default()};
    return rsthis;
    // return 1;
  }
}

// /usr/include/qt/QtGui/qpicture.h:61
// index:0
// Public virtual Visibility=Default Availability=Available
// [-2] void ~QPicture()

/*

*/
pub fn DeleteQPicture(this :*mut QPicture) {
    // let rv = qtrt::InvokeQtFunc6("_ZN8QPictureD2Ev", qtrt.FFI_TYPE_VOID, this.GetCthis());
    // qtrt.Cmemset(this.GetCthis(), 9, 32)
    // qtrt.ErrPrint(err, rv)
    // this.SetCthis(nil)
}
// /usr/include/qt/QtGui/qpicture.h:63
// index:0
// Public Visibility=Default Availability=Available
// [1] bool isNull() const

/*
Returns true if the picture contains no data; otherwise returns false.
*/
impl /*struct*/ QPicture {
  pub fn isNull_0<RetType, T: QPicture_isNull_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.isNull_0(self);
    // return 1;
  }
}
pub trait QPicture_isNull_0<RetType> {
  fn isNull_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_isNull_0<bool> for () {
  fn isNull_0(self , rsthis: & QPicture) -> bool {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture6isNullEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: bool = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:65
// index:0
// Public virtual Visibility=Default Availability=Available
// [4] int devType() const

/*

*/
impl /*struct*/ QPicture {
  pub fn devType_0<RetType, T: QPicture_devType_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.devType_0(self);
    // return 1;
  }
}
pub trait QPicture_devType_0<RetType> {
  fn devType_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_devType_0<i32> for () {
  fn devType_0(self , rsthis: & QPicture) -> i32 {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture7devTypeEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: i32 = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:66
// index:0
// Public Visibility=Default Availability=Available
// [4] uint size() const

/*
Returns the size of the picture data.

See also data().
*/
impl /*struct*/ QPicture {
  pub fn size_0<RetType, T: QPicture_size_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.size_0(self);
    // return 1;
  }
}
pub trait QPicture_size_0<RetType> {
  fn size_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_size_0<u32> for () {
  fn size_0(self , rsthis: & QPicture) -> u32 {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture4sizeEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: u32 = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:67
// index:0
// Public Visibility=Default Availability=Available
// [8] const char * data() const

/*
Returns a pointer to the picture data. The pointer is only valid until the next non-const function is called on this picture. The returned pointer is 0 if the picture contains no data.

See also setData(), size(), and isNull().
*/
impl /*struct*/ QPicture {
  pub fn data_0<RetType, T: QPicture_data_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.data_0(self);
    // return 1;
  }
}
pub trait QPicture_data_0<RetType> {
  fn data_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_data_0<usize> for () {
  fn data_0(self , rsthis: & QPicture) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture4dataEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:68
// index:0
// Public virtual Visibility=Default Availability=Available
// [-2] void setData(const char *, uint)

/*
Sets the picture data directly from data and size. This function copies the input data.

See also data() and size().
*/
impl /*struct*/ QPicture {
  pub fn setData_0<RetType, T: QPicture_setData_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.setData_0(self);
    // return 1;
  }
}
pub trait QPicture_setData_0<RetType> {
  fn setData_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_setData_0<(/*void*/)> for (usize,u32) {
  fn setData_0(self , rsthis: & QPicture) -> (/*void*/) {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (self.0) as *const usize as usize;
    let arg1 = (&self.1) as *const u32 as usize;
     qtrt::InvokeQtFunc6("_ZN8QPicture7setDataEPKcj", 2,qtrt::FFITY_POINTER,qtrt::FFITY_UINT32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,arg1,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
  }
}

// /usr/include/qt/QtGui/qpicture.h:70
// index:0
// Public Visibility=Default Availability=Available
// [1] bool play(QPainter *)

/*
Replays the picture using painter, and returns true if successful; otherwise returns false.

This function does exactly the same as QPainter::drawPicture() with (x, y) = (0, 0).
*/
impl /*struct*/ QPicture {
  pub fn play_0<RetType, T: QPicture_play_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.play_0(self);
    // return 1;
  }
}
pub trait QPicture_play_0<RetType> {
  fn play_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_play_0<bool> for (usize) {
  fn play_0(self , rsthis: & QPicture) -> bool {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self/*.qclsinst*/) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture4playEP8QPainter", 1,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: bool = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:72
// index:0
// Public Visibility=Default Availability=Available
// [1] bool load(QIODevice *, const char *)

/*
Loads a picture from the file specified by fileName and returns true if successful; otherwise invalidates the picture and returns false.

Please note that the format parameter has been deprecated and will have no effect.

See also save().
*/
impl /*struct*/ QPicture {
  pub fn load_0<RetType, T: QPicture_load_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.load_0(self);
    // return 1;
  }
}
pub trait QPicture_load_0<RetType> {
  fn load_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_load_0<bool> for (usize,usize) {
  fn load_0(self , rsthis: & QPicture) -> bool {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self.0/*.qclsinst*/) as *const usize as usize;
    let arg1 = (self.1) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture4loadEP9QIODevicePKc", 2,qtrt::FFITY_POINTER,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,arg1,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: bool = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:73
// index:1
// Public Visibility=Default Availability=Available
// [1] bool load(const QString &, const char *)

/*
Loads a picture from the file specified by fileName and returns true if successful; otherwise invalidates the picture and returns false.

Please note that the format parameter has been deprecated and will have no effect.

See also save().
*/
impl /*struct*/ QPicture {
  pub fn load_1<RetType, T: QPicture_load_1<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.load_1(self);
    // return 1;
  }
}
pub trait QPicture_load_1<RetType> {
  fn load_1(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_load_1<bool> for (usize,usize) {
  fn load_1(self , rsthis: & QPicture) -> bool {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self.0/*.qclsinst*/) as *const usize as usize;
    let arg1 = (self.1) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture4loadERK7QStringPKc", 2,qtrt::FFITY_POINTER,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,arg1,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: bool = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:74
// index:0
// Public Visibility=Default Availability=Available
// [1] bool save(QIODevice *, const char *)

/*
Saves a picture to the file specified by fileName and returns true if successful; otherwise returns false.

Please note that the format parameter has been deprecated and will have no effect.

See also load().
*/
impl /*struct*/ QPicture {
  pub fn save_0<RetType, T: QPicture_save_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.save_0(self);
    // return 1;
  }
}
pub trait QPicture_save_0<RetType> {
  fn save_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_save_0<bool> for (usize,usize) {
  fn save_0(self , rsthis: & QPicture) -> bool {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self.0/*.qclsinst*/) as *const usize as usize;
    let arg1 = (self.1) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture4saveEP9QIODevicePKc", 2,qtrt::FFITY_POINTER,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,arg1,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: bool = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:75
// index:1
// Public Visibility=Default Availability=Available
// [1] bool save(const QString &, const char *)

/*
Saves a picture to the file specified by fileName and returns true if successful; otherwise returns false.

Please note that the format parameter has been deprecated and will have no effect.

See also load().
*/
impl /*struct*/ QPicture {
  pub fn save_1<RetType, T: QPicture_save_1<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.save_1(self);
    // return 1;
  }
}
pub trait QPicture_save_1<RetType> {
  fn save_1(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_save_1<bool> for (usize,usize) {
  fn save_1(self , rsthis: & QPicture) -> bool {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self.0/*.qclsinst*/) as *const usize as usize;
    let arg1 = (self.1) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture4saveERK7QStringPKc", 2,qtrt::FFITY_POINTER,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,arg1,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: bool = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:77
// index:0
// Public Visibility=Default Availability=Available
// [16] QRect boundingRect() const

/*
Returns the picture's bounding rectangle or an invalid rectangle if the picture contains no data.

See also setBoundingRect().
*/
impl /*struct*/ QPicture {
  pub fn boundingRect_0<RetType, T: QPicture_boundingRect_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.boundingRect_0(self);
    // return 1;
  }
}
pub trait QPicture_boundingRect_0<RetType> {
  fn boundingRect_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_boundingRect_0<usize> for () {
  fn boundingRect_0(self , rsthis: & QPicture) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture12boundingRectEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:78
// index:0
// Public Visibility=Default Availability=Available
// [-2] void setBoundingRect(const QRect &)

/*
Sets the picture's bounding rectangle to r. The automatically calculated value is overridden.

See also boundingRect().
*/
impl /*struct*/ QPicture {
  pub fn setBoundingRect_0<RetType, T: QPicture_setBoundingRect_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.setBoundingRect_0(self);
    // return 1;
  }
}
pub trait QPicture_setBoundingRect_0<RetType> {
  fn setBoundingRect_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_setBoundingRect_0<(/*void*/)> for (usize) {
  fn setBoundingRect_0(self , rsthis: & QPicture) -> (/*void*/) {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self/*.qclsinst*/) as *const usize as usize;
     qtrt::InvokeQtFunc6("_ZN8QPicture15setBoundingRectERK5QRect", 1,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
  }
}

// /usr/include/qt/QtGui/qpicture.h:80
// index:0
// Public Visibility=Default Availability=Available
// [32] QPicture & operator=(const QPicture &)

/*

*/
impl /*struct*/ QPicture {
  pub fn operator_equal_0<RetType, T: QPicture_operator_equal_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.operator_equal_0(self);
    // return 1;
  }
}
pub trait QPicture_operator_equal_0<RetType> {
  fn operator_equal_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_operator_equal_0<usize> for (usize) {
  fn operator_equal_0(self , rsthis: & QPicture) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self/*.qclsinst*/) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPictureaSERKS_", 1,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:82
// index:1
// Public inline Visibility=Default Availability=Available
// [32] QPicture & operator=(QPicture &&)

/*

*/
impl /*struct*/ QPicture {
  pub fn operator_equal_1<RetType, T: QPicture_operator_equal_1<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.operator_equal_1(self);
    // return 1;
  }
}
pub trait QPicture_operator_equal_1<RetType> {
  fn operator_equal_1(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_operator_equal_1<usize> for (usize) {
  fn operator_equal_1(self , rsthis: & QPicture) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPictureaSEOS_", 1,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:85
// index:0
// Public inline Visibility=Default Availability=Available
// [-2] void swap(QPicture &)

/*
Swaps picture other with this picture. This operation is very fast and never fails.

This function was introduced in  Qt 4.8.
*/
impl /*struct*/ QPicture {
  pub fn swap_0<RetType, T: QPicture_swap_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.swap_0(self);
    // return 1;
  }
}
pub trait QPicture_swap_0<RetType> {
  fn swap_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_swap_0<(/*void*/)> for (usize) {
  fn swap_0(self , rsthis: & QPicture) -> (/*void*/) {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self/*.qclsinst*/) as *const usize as usize;
     qtrt::InvokeQtFunc6("_ZN8QPicture4swapERS_", 1,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
  }
}

// /usr/include/qt/QtGui/qpicture.h:87
// index:0
// Public Visibility=Default Availability=Available
// [-2] void detach()

/*

*/
impl /*struct*/ QPicture {
  pub fn detach_0<RetType, T: QPicture_detach_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.detach_0(self);
    // return 1;
  }
}
pub trait QPicture_detach_0<RetType> {
  fn detach_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_detach_0<(/*void*/)> for () {
  fn detach_0(self , rsthis: & QPicture) -> (/*void*/) {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
     qtrt::InvokeQtFunc6("_ZN8QPicture6detachEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
  }
}

// /usr/include/qt/QtGui/qpicture.h:88
// index:0
// Public Visibility=Default Availability=Available
// [1] bool isDetached() const

/*

*/
impl /*struct*/ QPicture {
  pub fn isDetached_0<RetType, T: QPicture_isDetached_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.isDetached_0(self);
    // return 1;
  }
}
pub trait QPicture_isDetached_0<RetType> {
  fn isDetached_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_isDetached_0<bool> for () {
  fn isDetached_0(self , rsthis: & QPicture) -> bool {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture10isDetachedEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: bool = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:94
// index:0
// Public static Visibility=Default Availability=Available
// [8] const char * pictureFormat(const QString &)

/*

*/
impl /*struct*/ QPicture {
  pub fn pictureFormat_0<RetType, T: QPicture_pictureFormat_0<RetType>>( overload_args: T) -> RetType {
    return overload_args.pictureFormat_0();
    // return 1;
  }
}
pub trait QPicture_pictureFormat_0<RetType> {
  fn pictureFormat_0(self ) -> RetType;
}
impl<'a> /*trait*/ QPicture_pictureFormat_0<usize> for (usize) {
  fn pictureFormat_0(self ) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self/*.qclsinst*/) as *const usize as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture13pictureFormatERK7QString", 1,qtrt::FFITY_POINTER,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:97
// index:0
// Public static Visibility=Default Availability=Available
// [8] QStringList inputFormatList()

/*

*/
impl /*struct*/ QPicture {
  pub fn inputFormatList_0<RetType, T: QPicture_inputFormatList_0<RetType>>( overload_args: T) -> RetType {
    return overload_args.inputFormatList_0();
    // return 1;
  }
}
pub trait QPicture_inputFormatList_0<RetType> {
  fn inputFormatList_0(self ) -> RetType;
}
impl<'a> /*trait*/ QPicture_inputFormatList_0<usize> for () {
  fn inputFormatList_0(self ) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture15inputFormatListEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:98
// index:0
// Public static Visibility=Default Availability=Available
// [8] QStringList outputFormatList()

/*

*/
impl /*struct*/ QPicture {
  pub fn outputFormatList_0<RetType, T: QPicture_outputFormatList_0<RetType>>( overload_args: T) -> RetType {
    return overload_args.outputFormatList_0();
    // return 1;
  }
}
pub trait QPicture_outputFormatList_0<RetType> {
  fn outputFormatList_0(self ) -> RetType;
}
impl<'a> /*trait*/ QPicture_outputFormatList_0<usize> for () {
  fn outputFormatList_0(self ) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZN8QPicture16outputFormatListEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:101
// index:0
// Public virtual Visibility=Default Availability=Available
// [8] QPaintEngine * paintEngine() const

/*

*/
impl /*struct*/ QPicture {
  pub fn paintEngine_0<RetType, T: QPicture_paintEngine_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.paintEngine_0(self);
    // return 1;
  }
}
pub trait QPicture_paintEngine_0<RetType> {
  fn paintEngine_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_paintEngine_0<usize> for () {
  fn paintEngine_0(self , rsthis: & QPicture) -> usize {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture11paintEngineEv", 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: usize = Default::default(); return dret;
  }
}

// /usr/include/qt/QtGui/qpicture.h:106
// index:0
// Protected virtual Visibility=Default Availability=Available
// [4] int metric(QPaintDevice::PaintDeviceMetric) const

/*

*/
impl /*struct*/ QPicture {
  pub fn metric_0<RetType, T: QPicture_metric_0<RetType>>(&self,  overload_args: T) -> RetType {
    return overload_args.metric_0(self);
    // return 1;
  }
}
pub trait QPicture_metric_0<RetType> {
  fn metric_0(self , rsthis: & QPicture) -> RetType;
}
impl<'a> /*trait*/ QPicture_metric_0<i32> for (i32) {
  fn metric_0(self , rsthis: & QPicture) -> i32 {
    // let qthis: *mut c_void = unsafe{calloc(1, ctx.ctysz)};
    let arg0 = (&self) as *const i32 as usize;
    let mut ret = qtrt::InvokeQtFunc6("_ZNK8QPicture6metricEN12QPaintDevice17PaintDeviceMetricE", 1,qtrt::FFITY_INT,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,arg0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    // return 1;
    let dret: i32 = Default::default(); return dret;
  }
}

//  body block end

//  keep block begin

//  keep block end
